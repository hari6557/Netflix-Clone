{"version":3,"sources":["constants/constants.js","axios.js","components/Row.js","components/Nav.js","requests.js","components/Banner.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","baseImgUrl","instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","handleClick","movie","id","trailerurl","key","className","map","backdrop_path","src","poster_path","alt","name","onClick","videoId","opts","height","width","playerVars","autoplay","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","console","log","style","backgroundSize","backgroundImage","original_name","overview","substr","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49b1a685.chunk.js","sourcesContent":["export const API_KEY = \"d03799692be1c26faf0ade18a4205f9f\";\r\n\r\nexport const baseImgUrl = 'https://image.tmdb.org/t/p/original';\r\n\r\nexport const baseURL = \"https://api.themoviedb.org/3\";\r\n","import axios from 'axios';\r\nimport {baseURL} from './constants/constants';\r\n\r\nconst instance = axios.create({\r\n  baseURL: baseURL,\r\n});\r\n\r\nexport default instance;\r\n","import React, {useState, useEffect} from 'react';\r\nimport axios from '../axios';\r\nimport './Row.css';\r\nimport Youtube from 'react-youtube';\r\nimport {baseImgUrl, API_KEY} from '../constants/constants';\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}) {\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n  // Options for react-youtube\r\n  const opts = {\r\n    height: '390',\r\n    width: '100%',\r\n    playerVars: {\r\n      autoplay: 1,\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  const handleClick = async (movie) => {\r\n    if (trailerUrl) {\r\n      setTrailerUrl('');\r\n    } else {\r\n      let trailerurl = await axios.get(\r\n        `/movie/${movie.id}/videos?api_key=${API_KEY}`\r\n      );\r\n      setTrailerUrl(trailerurl.data.results[0]?.key);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row_posters\">\r\n        {movies.map(\r\n          (movie) =>\r\n            movie.backdrop_path !== null && (\r\n              <img\r\n                className={`row_poster ${isLargeRow && 'row_posterLarge'}`}\r\n                src={`${baseImgUrl}${\r\n                  isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                }`}\r\n                alt={movie.name}\r\n                key={movie.id}\r\n                onClick={() => handleClick(movie)}\r\n              />\r\n            )\r\n        )}\r\n      </div>\r\n      {trailerUrl && <Youtube videoId={trailerUrl} opts={opts} />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./Nav.css\";\r\n\r\nfunction Nav() {\r\n  const [show, handleShow] = useState(false);\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", () => {\r\n      if (window.scrollY > 100) {\r\n        handleShow(true);\r\n      } else {\r\n        handleShow(false);\r\n      }\r\n    });\r\n    return () => {\r\n      window.removeEventListener(\"scroll\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`nav ${show && \"nav_black\"}`}>\r\n      <img\r\n        className=\"nav_logo\"\r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1920px-Netflix_2015_logo.svg.png\"\r\n        alt=\"Netflix Logo\"\r\n      />\r\n      <img\r\n        className=\"nav_avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"Avatar\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","// const API_KEY = \"fb34530271b349314af0de263d16ab5a\";\r\nimport {API_KEY} from './constants/constants';\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"../axios\";\r\nimport requests from \"../requests\";\r\nimport {baseImgUrl} from \"../constants/constants\"\r\nimport \"./Banner.css\";\r\n\r\nfunction Banner() {\r\n  const [movie, setMovie] = useState();\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const request = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        request.data.results[\r\n          Math.floor(Math.random() * request.data.results.length - 1)\r\n        ]\r\n      );\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  function truncate(str, n) {\r\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\r\n  }\r\n\r\n  console.log(movie);\r\n\r\n  return (\r\n    <header\r\n      className=\"banner\"\r\n      style={{  \r\n        backgroundSize: \"cover\",\r\n        backgroundImage: `url(\"${baseImgUrl}${movie?.backdrop_path}\")`\r\n      }}\r\n    >\r\n      {/* Background image */}\r\n      <div className=\"banner_contents\">\r\n        {/* title */}\r\n        <h1 className=\"banner_title\">\r\n          {movie?.title || movie?.name || movie?.original_name}\r\n        </h1>\r\n\r\n        {/* 2 buttons */}\r\n        <div className=\"banner_buttons\">\r\n          <button className=\"banner_button\">Play</button>\r\n          <button className=\"banner_button\">My List </button>\r\n        </div>\r\n\r\n        {/* description */}\r\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 200)}</h1>\r\n      </div>\r\n      <div className=\"banner_fadeBottom\" />\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Banner;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Row from \"./components/Row\";\r\nimport Nav from \"./components/Nav\";\r\nimport Banner from \"./components/Banner\";\r\nimport requests from \"./requests\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* Navbar */}\r\n      <Nav />\r\n\r\n      {/* Banner */}\r\n      <Banner />\r\n\r\n      {/* Rows */}\r\n      <Row\r\n        title=\"NETFLIX ORIGINALS\"\r\n        fetchUrl={requests.fetchNetflixOriginals}\r\n        isLargeRow\r\n      />\r\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}